application {
	config {
	    applicationType gateway
		baseName RpmPrimeGateway
		packageName com.github.scottvin.rpm
        buildTool gradle
        clientFramework react
        clientTheme Darkly
        clientThemeVariant light
        skipServer true
        blueprints []
	}
	entities *
}

application {
	config {
	    applicationType gateway
		baseName RpmGateway
		packageName com.github.scottvin.rpm
        buildTool gradle
        clientFramework react
        clientTheme Darkly
        clientThemeVariant light
        skipServer true
        blueprints []
	}
	entities *
}

application {
	config {
	    applicationType monolith
		baseName Rpm
		packageName com.github.scottvin.rpm
        buildTool gradle
        clientFramework react
        clientTheme Darkly
        clientThemeVariant light
        skipClient true
        blueprints []
	}
	entities *
}

// RpmCategory
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCategory {
	name String unique

}

// RpmCategoryGroup
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCategoryGroup {
	name String unique

}

// RpmVision
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmVision {
	name String unique

}

// RpmPurpose
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmPurpose {
	name String unique

}

// RpmRole
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmRole {
	name String unique

}

// RpmResult
@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmResult {
	name String unique
	start Instant
	stop Instant
	duration Duration
}



// RpmPlan
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmPlan {
	name String unique

}

// RpmProject
@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmProject {
	name String unique

}

// RpmPriority Type
enum RpmPriorityType {
    HIGH(High)
    MEDIUM(Medium)
    LOW(Low)
}

// RpmPriority
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmPriority {
	name String unique
	type RpmPriorityType
	weight BigDecimal
}

// RpmAction
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmAction {
	name String unique

}

// RpmMood
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmMood {
	name String unique

}

// RpmResource
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmResource {
	name String unique

}

// RpmLocation
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmLocation {
	name String unique

}

// RpmDateTime
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmDateTime {
	name String unique

}

// RpmCharacterGroup
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCharacterGroup {
	name String unique

}

// RpmCharacter
@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCharacter {
	name String unique

}

// RpmPractice
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmPractice {
	name String unique

}

// RpmQuote
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmQuote {
	name String unique

}

// RpmCredit
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCredit {
	name String unique

}

// RpmComment
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmComment {
	name String unique

}

// RpmName
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmName {
	name String unique

}

// RpmDescription
//@filter(true)
@dto(mapstruct)
@service(no)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmDescription {
	name String unique

}

// RpmCapture
//@filter(true)
@dto(mapstruct)
@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCapture

relationship OneToOne {
    /** Action TODO add User entity */
    RpmAction{purpose} to RpmPurpose
    RpmAction{expectedResult} to RpmResult
    RpmAction{actualResult} to RpmResult
    RpmAction{mood} to RpmMood
    RpmAction{priority} to RpmPriority
    RpmAction{role} to RpmRole
    RpmAction{resource} to RpmResource
    RpmAction{location} to RpmLocation
    RpmAction{dateTime} to RpmDateTime



    RpmCategory{vision} to RpmVision
    RpmCategory{purpose} to RpmPurpose

    RpmCapture{categoryGroup} to RpmCategoryGroup
    RpmCapture{category} to RpmCategory

    RpmCapture{characterGroup} to RpmCharacterGroup
    RpmCapture{character} to RpmCharacter

    RpmCapture{project} to RpmProject
    RpmCapture{keyResult} to RpmResult

    RpmCapture{plan} to RpmPlan

    // Capture Action
    RpmCapture{action} to RpmAction
    RpmCapture{expectedResult} to RpmResult
    RpmCapture{actualResult} to RpmResult
    RpmCapture{mood} to RpmMood
    RpmCapture{role} to RpmRole
    RpmCapture{location} to RpmLocation


    // Capture Common
    RpmCapture{name} to RpmName
    RpmCapture{description} to RpmDescription
    RpmCapture{credit} to RpmCredit
    RpmCapture{priority} to RpmPriority
    RpmCapture{purpose} to RpmPurpose
    RpmCapture{resource} to RpmResource
    RpmCapture{quote} to RpmQuote
    RpmCapture{practice} to RpmPractice
}

relationship ManyToOne {
    RpmComment{capture} to RpmCapture
    RpmCharacter{category} to RpmCategory
    RpmCharacter{group} to RpmCharacterGroup
    RpmProject{category} to RpmCategory
    RpmResult{project} to RpmProject
    RpmPlan{project} to RpmProject
    RpmAction{plan} to RpmPlan
    RpmCategory{categoryGroup} to RpmCategoryGroup
    RpmPractice{character} to RpmCharacter
    RpmQuote{character} to RpmCharacter
}
