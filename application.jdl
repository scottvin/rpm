application {
	config {
	    applicationType monolith
		baseName rpm
		packageName com.github.scottvin.rpm
        buildTool gradle
        clientFramework react
        clientTheme Darkly
        clientThemeVariant light
	}
	entities *
}

// RpmCategory
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCategory {
	name String required
}

// RpmAspect
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmAspect {
	name String required
}

// RpmVision
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmVision {
	name String required
}

// RpmPurpose
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmPurpose {
	name String required
}

// RpmRole
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmRole {
	name String required
}

// RpmResult
@filter(true)
@dto(mapstruct)
@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmResult {
	name String required
}

// RpmPlan
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmPlan {
	name String required
	dateTime ZonedDateTime required
	duration Duration required
}

// RpmProject
@filter(true)
@dto(mapstruct)
@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmProject {
	name String required
	dateTime ZonedDateTime required
	duration Duration required
}

// RpmOutcome
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmOutcome {
	name String required
	dateTime ZonedDateTime required
	duration Duration required
}

// RpmAction
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmAction {
	name String required
	priority Integer required
	dateTime ZonedDateTime required
	duration Duration required
}

// RpmReason
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmReason {
	name String required
}

// RpmResource
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmResource {
	name String required
}

// RpmCapture
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCapture {
	name String required
	dateTime ZonedDateTime required
	duration Duration required
}

// RpmCharacter
@filter(true)
@dto(mapstruct)
@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCharacter {
	name String required
	description String required
	priority Integer required
}

// RpmCharacterGroup
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmCharacterGroup {
	name String required
	priority Integer required
}

// RpmPractice
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmPractice {
	name String required
}

// RpmQuote
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmQuote {
	name String required
}

// RpmComment
//@filter(true)
@dto(mapstruct)
//@service(serviceImpl)
@paginate(infinite-scroll)
//@microservice(rpm)
entity RpmComment {
	name String required
}

relationship OneToOne {
    RpmAction{plan(name) required} to RpmPlan
    RpmAction{reason(name) required} to RpmReason
    RpmAction{captures(name) required} to RpmCapture
}

relationship ManyToOne {

    RpmResult{category(name) required} to RpmCategory
    RpmResult{aspect(name) required} to RpmAspect
    RpmResult{vision(name) required} to RpmVision
    RpmResult{purpose(name) required} to RpmPurpose
    RpmResult{role(name) required} to RpmRole

    RpmResource{action(name) required} to RpmAction

    RpmCharacter{result(name) required} to RpmResult
    RpmAction{result(name) required} to RpmResult
    RpmComment{result(name) required} to RpmResult

    RpmOutcome{project(name) required} to RpmProject
    RpmPlan{project(name) required} to RpmProject
    RpmAction{project(name) required} to RpmProject
    RpmComment{project(name) required} to RpmProject
    RpmComment{action(name) required} to RpmAction

    RpmPractice{character(name) required} to RpmCharacter
    RpmQuote{character(name) required} to RpmCharacter
    RpmComment{character(name) required} to RpmCharacter

}
